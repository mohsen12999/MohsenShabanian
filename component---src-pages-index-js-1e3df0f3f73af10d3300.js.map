{"version":3,"sources":["webpack:///./src/components/changetext.js","webpack:///./src/pages/index.js"],"names":["words","colors","time","step","wait","undefined","length","useState","waiting","setWaiting","letter","setLetter","letterCount","setLetterCount","word","setWord","wordCounter","setWordCounter","color","setColor","colorCounter","setColorCounter","typing","setTyping","makeText","substring","useEffect","interval","setInterval","clearInterval","style","className","Typography","variant","component","gutterBottom"],"mappings":"8JAGe,G,UAAA,YAA0C,IAAvCA,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAE3CJ,OAAkBK,IAAVL,GAAuBA,EAAMM,OAAS,EAAIN,EADjC,CAAC,eAAgB,eAAgB,kBAAmB,OAErEC,OACaI,IAAXJ,GAAwBA,EAAOK,OAAS,EACpCL,EACA,CAAC,OAAQ,OAAQ,OAAQ,QAC/BC,OAAgBG,IAATH,EAAqBA,EAAO,IACnCC,OAAgBE,IAATF,EAAqBA,EAAO,EACnCC,OAAgBC,IAATD,EAAqBA,EAAO,EATmB,MAWxBG,mBAASH,GAAhCI,EAX+C,KAWtCC,EAXsC,OAa1BF,mBAAS,IAA9BG,EAb+C,KAavCC,EAbuC,OAchBJ,mBAAS,GAAxCK,EAd+C,KAclCC,EAdkC,OAgB9BN,mBAAS,IAA1BO,EAhB+C,KAgBzCC,EAhByC,OAiBhBR,mBAAS,GAAxCS,EAjB+C,KAiBlCC,EAjBkC,OAmB5BV,mBAAS,IAA5BW,EAnB+C,KAmBxCC,EAnBwC,OAoBdZ,mBAAS,GAA1Ca,EApB+C,KAoBjCC,EApBiC,OAsB1Bd,oBAAS,GAA9Be,EAtB+C,KAsBvCC,EAtBuC,KAwBhDC,EAAW,WACXhB,EAAU,EAEZC,EAAWD,EAAU,GACI,IAAhBI,GAGTH,EAAWL,GAEPgB,IAAiBnB,EAAOK,OAAS,EACnCe,EAAgB,GAEhBA,EAAgBD,EAAe,GAEjCD,EAASlB,EAAOmB,IAEZJ,IAAgBhB,EAAMM,OAAS,EACjCW,EAAe,GAEfA,EAAeD,EAAc,GAE/BD,EAAQf,EAAMgB,IACdH,EAAeV,GACfoB,GAAU,GACVZ,EAAUG,EAAKW,UAAU,EAAGb,KACnBA,IAAgBE,EAAKR,OAAS,IAAgB,IAAXgB,GAE5Cb,EAAWL,GACXmB,GAAU,KAGVZ,EAAUG,EAAKW,UAAU,EAAGb,IAE1BC,EADES,EACaV,EAAc,EAEdA,EAAc,KAUnC,OALAc,qBAAU,WACR,IAAMC,EAAWC,YAAYJ,EAAUtB,GACvC,OAAO,kBAAM2B,cAAcF,OAI3B,oCACE,0BAAMG,MAAO,CAAEZ,MAAOA,IAAUR,GAChC,0BAAMqB,UAAU,SAAhB,Q,sBCpES,4BACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,eACb,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,GAApD,oBAGA,kBAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKE,cAAY,GAArC,QACQ,IACN,kBAAC,EAAD,CACEnC,MAAO,CACL,iBACA,WACA,WACA,SACA,wB","file":"component---src-pages-index-js-1e3df0f3f73af10d3300.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport \"./changetext.css\"\r\n\r\nexport default ({ words, colors, time, step, wait }) => {\r\n  const tempText = [\"Hello World.\", \"Console Text\", \"Made with Love.\", \"ali\"]\r\n  words = words !== undefined && words.length > 0 ? words : tempText\r\n  colors =\r\n    colors !== undefined && colors.length > 0\r\n      ? colors\r\n      : [\"#fff\", \"#000\", \"#f00\", \"#0f0\"]\r\n  time = time !== undefined ? time : 120\r\n  step = step !== undefined ? step : 1\r\n  wait = wait !== undefined ? wait : 4\r\n\r\n  const [waiting, setWaiting] = useState(wait)\r\n\r\n  const [letter, setLetter] = useState(\"\")\r\n  const [letterCount, setLetterCount] = useState(0)\r\n\r\n  const [word, setWord] = useState(\"\")\r\n  const [wordCounter, setWordCounter] = useState(0)\r\n\r\n  const [color, setColor] = useState(\"\")\r\n  const [colorCounter, setColorCounter] = useState(0)\r\n\r\n  const [typing, setTyping] = useState(true)\r\n\r\n  const makeText = () => {\r\n    if (waiting > 0) {\r\n      // waiting...\r\n      setWaiting(waiting - 1)\r\n    } else if (letterCount === 0) {\r\n      // change word\r\n      // add waiting\r\n      setWaiting(wait)\r\n      // change color\r\n      if (colorCounter === colors.length - 1) {\r\n        setColorCounter(0)\r\n      } else {\r\n        setColorCounter(colorCounter + 1)\r\n      }\r\n      setColor(colors[colorCounter])\r\n      // change words\r\n      if (wordCounter === words.length - 1) {\r\n        setWordCounter(0)\r\n      } else {\r\n        setWordCounter(wordCounter + 1)\r\n      }\r\n      setWord(words[wordCounter])\r\n      setLetterCount(step)\r\n      setTyping(true)\r\n      setLetter(word.substring(0, letterCount))\r\n    } else if (letterCount === word.length + 1 && typing !== false) {\r\n      // end of letter...\r\n      setWaiting(wait)\r\n      setTyping(false)\r\n    } else {\r\n      // write letter...\r\n      setLetter(word.substring(0, letterCount))\r\n      if (typing) {\r\n        setLetterCount(letterCount + 1)\r\n      } else {\r\n        setLetterCount(letterCount - 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(makeText, time)\r\n    return () => clearInterval(interval)\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <span style={{ color: color }}>{letter}</span>\r\n      <span className=\"blink\">&#95;</span>\r\n    </>\r\n  )\r\n}\r\n\r\n// https://codepen.io/Tbgse/pen/dYaJyJ\r\n","import React from \"react\"\r\nimport { Typography } from \"@material-ui/core\"\r\nimport ChangeText from \"../components/changetext\"\r\nimport Layout from \"../components/layout\"\r\n\r\nimport \"./index.css\"\r\n\r\nexport default () => (\r\n  <Layout>\r\n    <div className=\"main-banner\">\r\n      <Typography variant=\"h2\" component=\"h2\" gutterBottom>\r\n        Mohsen Shabanian\r\n      </Typography>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        I'm a{\" \"}\r\n        <ChangeText\r\n          words={[\r\n            \"Web Developer.\",\r\n            \"Teacher.\",\r\n            \"Learner.\",\r\n            \"Gamer.\",\r\n            \"Computer Guy!\",\r\n          ]}\r\n        />\r\n      </Typography>\r\n    </div>\r\n  </Layout>\r\n)\r\n"],"sourceRoot":""}